class Evento
types
-- TODO Define types here
	public String = seq of char;

values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	private designacao: String;
	private dataEvento: Data;
	private provas: set of Prova := {};
	-- private id: nat;
	--private idProva: nat;
	
operations
	public Evento : String * Data ==> Evento
				 Evento(design, data)==(
						-- id := id0;
						 designacao := design;
						 dataEvento := data;
				 );
				 
				 public adicionaProva: Prova ==> () --id, tipo0, preco0, referencia0
				 				adicionaProva(prova) ==
				 		provas := provas union {prova}
				 		
				 		pre prova not in set provas;
				 
	--	public adicionaProva:  Prova`Tipo * nat * nat ==> () --id, tipo0, preco0, referencia0
		--		 adicionaProva(tipo, preco, referencia) ==
			--	 (
				-- 		dcl prova: Prova;
				 	--	idProva := idProva + 1;
				 		--prova := new Prova(idProva, tipo, preco, referencia);
				 		--provas := provas union {prova};
				 --);
				 			 
	public getDataEvento : () ==> Data
				 getDataEvento() == 
				 		return dataEvento
				 		
				 	post RESULT = dataEvento;
				 	
	public getProvas : () ==> set of Prova
				 getProvas() ==
				 		return provas
	
				 post RESULT = provas;
				 
	--public getId : () ==> nat
		--		 getId() ==
			--	 		return id
				 		
				-- post RESULT = id;
-- TODO Define operations here
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Evento