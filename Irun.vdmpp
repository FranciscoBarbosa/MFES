class Irun
types
-- TODO Define types here
	public String = seq of char;
values
-- TODO Define values here
instance variables

private atletas : set of Atleta:= {};
private eventos : set of Evento:= {};
private dataAtual: Data;
private calendarioEventos: map Data to Evento := { |-> };
private idEvento: nat :=0;
-- TODO Define instance variables here
operations

	public Irun: Data ==> Irun
				 Irun(dataAtual0) ==
				 		dataAtual := dataAtual0;
				 	
				 --	pre 	
				 		
		public adicionaEvento: Evento ==> ()
					 adicionaEvento(evento) == (
				 		eventos := eventos union {evento};
				 		calendarioEventos := Irun`calendarioEventos munion {evento.getDataEvento() |-> evento}
				 		)
				 		
				 		pre evento not in set eventos;
	
	--public adicionaEvento: String * Data ==> ()
				 --adicionaEvento(designacao, data) == (
				 		--dcl evento: Evento;
				 		--idEvento := idEvento + 1;
				 		--evento := new Evento(idEvento, designacao, data);
				 		--eventos := eventos union {evento};
				 	--	calendarioEventos := Irun`calendarioEventos munion {evento.getDataEvento() |-> evento}
				 --);
				 

			--	 pre evento not in set eventos;
				 		
	public registaAtleta: Atleta ==> ()
				 registaAtleta(atleta) ==
				 		atletas := atletas union {atleta}
				 		
				 pre atleta not in set atletas;
				 
	public getClassificacoesProva: Prova ==> map Atleta to Tempo
				 getClassificacoesProva(prova) ==
				 		return prova.getTemposAtletas();
				 		
	public calculaIdadeAtletas: () ==> ()
				 calculaIdadeAtletas() ==
				 		for all atleta in set atletas do
				 			atleta.calculaIdade(dataAtual);
				 			
	public getClassificacoesGenero: Prova * Atleta`Genero ==> map Atleta to Tempo
				 getClassificacoesGenero(prova,genero) ==
				 			return prova.getTemposGenero(genero);
				 			
	public getClassificacoesIdade: Prova * nat * nat ==> map Atleta to Tempo
				 getClassificacoesIdade(prova, idadeMin, idadeMax) ==
				 			return prova.getTemposIdade(idadeMin, idadeMax);		
				 			
	public getRegistados:() ==> set of Atleta
				 getRegistados() ==
				 			return atletas;	 			
				 			
	public getEventos:() ==> set of Evento
				 getEventos() ==
				 			return eventos;
				 			
	public getCalendarioEventos:() ==> map Data to Evento
				 getCalendarioEventos() ==
				 			return calendarioEventos;
				 			
	-- verifica se a prova existe em algum evento e se a data do evento ja passou para ser possivel atribuir tempos			 			
	public setTempoAtleta: Prova * Atleta * Tempo ==> ()
			 	 setTempoAtleta(prova, atleta1, tempo) == 
			 		for all evento in set eventos do 
			 		(
				 		if prova in set evento.getProvas() and dataAtual.maisTarde(evento.getDataEvento())
				 		then
				 		prova.setTempoAtleta(atleta1, tempo);
			 		)
		 		
-- TODO Define operations here
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Irun